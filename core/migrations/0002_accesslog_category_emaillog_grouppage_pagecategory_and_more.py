# Generated by Django 5.2.4 on 2025-08-07 10:46

import django.core.validators
import django.db.models.deletion
import tinymce.models
import utils.utils
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AccessLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('page_name', models.CharField(max_length=255)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('country', models.CharField(blank=True, max_length=255, null=True)),
                ('country_code', models.CharField(blank=True, max_length=255, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('referer', models.TextField(blank=True, null=True)),
                ('request_path', models.URLField(blank=True, max_length=2000, null=True)),
                ('headers', models.JSONField(blank=True, null=True)),
                ('ip_json', models.JSONField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Access Log',
                'verbose_name_plural': 'Access Log',
                'db_table': 'access_logs',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=300, null=True)),
            ],
            options={
                'verbose_name_plural': 'Category',
                'db_table': 'categories',
            },
        ),
        migrations.CreateModel(
            name='EmailLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('action', models.CharField(max_length=255)),
                ('user_email', models.EmailField(blank=True, max_length=255, null=True)),
                ('data', tinymce.models.HTMLField(blank=True, null=True)),
                ('error', tinymce.models.HTMLField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Email Log',
                'verbose_name_plural': 'Email Log',
                'db_table': 'email_logs',
            },
        ),
        migrations.CreateModel(
            name='GroupPage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Tên group')),
                ('display_in_footer', models.BooleanField(default=False, verbose_name='Hiển thị phần footer?')),
            ],
            options={
                'verbose_name_plural': 'Group Page',
                'db_table': 'group_pages',
            },
        ),
        migrations.CreateModel(
            name='PageCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Chủ đề')),
            ],
            options={
                'verbose_name_plural': 'Page Category',
                'db_table': 'page_categories',
            },
        ),
        migrations.CreateModel(
            name='SiteInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('meta_title', models.CharField(blank=True, max_length=70, null=True)),
                ('meta_description', models.CharField(blank=True, max_length=160, null=True)),
                ('meta_keywords', models.CharField(blank=True, max_length=255, null=True)),
                ('brand_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Tên thương hiệu')),
                ('site_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Tên trang web')),
                ('site_url', models.URLField(blank=True, max_length=2000, null=True, verbose_name='Link')),
                ('email', models.EmailField(blank=True, max_length=255, null=True, verbose_name='Email')),
                ('hotline', models.CharField(blank=True, max_length=15, null=True, verbose_name='Hotline')),
                ('address', models.CharField(blank=True, max_length=255, null=True, verbose_name='Address')),
                ('zipcode', models.CharField(blank=True, max_length=31, null=True, verbose_name='Zipcode')),
                ('support', models.CharField(blank=True, max_length=15, null=True, verbose_name='Support')),
                ('facebook_link', models.URLField(blank=True, max_length=2000, null=True, verbose_name='Facebook')),
                ('youtube_link', models.URLField(blank=True, max_length=2000, null=True, verbose_name='Youtube')),
                ('tiktok_link', models.URLField(blank=True, max_length=2000, null=True, verbose_name='Tiktok')),
                ('x_link', models.URLField(blank=True, max_length=2000, null=True, verbose_name='X (Twitter)')),
                ('linkedin_link', models.URLField(blank=True, max_length=2000, null=True, verbose_name='LinkedIn')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='site_imgs/', verbose_name='Logo Image')),
                ('thumb_img', models.ImageField(blank=True, null=True, upload_to='site_imgs', verbose_name='Thumb Image')),
                ('favicon', models.FileField(blank=True, null=True, upload_to='site_imgs', verbose_name='Favicon Icon')),
            ],
            options={
                'verbose_name': 'Site Info',
                'verbose_name_plural': 'Site Info',
                'db_table': 'site_info',
                'ordering': ['site_name', 'email', '-updated_at'],
            },
        ),
        migrations.RenameField(
            model_name='user',
            old_name='zalo',
            new_name='instagram',
        ),
        migrations.AddField(
            model_name='user',
            name='bio',
            field=tinymce.models.HTMLField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='user',
            name='profile_file',
            field=models.FileField(blank=True, null=True, upload_to='profile/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['html', 'htm'])]),
        ),
        migrations.AddField(
            model_name='user',
            name='tiktok',
            field=models.URLField(blank=True, max_length=2000, null=True),
        ),
        migrations.AddField(
            model_name='user',
            name='x',
            field=models.URLField(blank=True, max_length=2000, null=True),
        ),
        migrations.AlterField(
            model_name='user',
            name='address',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='user',
            name='age',
            field=models.SmallIntegerField(default=18),
        ),
        migrations.AlterField(
            model_name='user',
            name='first_name',
            field=models.CharField(blank=True, max_length=110, null=True),
        ),
        migrations.AlterField(
            model_name='user',
            name='fullname',
            field=models.CharField(max_length=255),
        ),
        migrations.AlterField(
            model_name='user',
            name='gender',
            field=models.SmallIntegerField(choices=[(0, 'Male'), (1, 'Female')], default=0),
        ),
        migrations.AlterField(
            model_name='user',
            name='last_name',
            field=models.CharField(blank=True, max_length=110, null=True),
        ),
        migrations.AlterField(
            model_name='user',
            name='phone',
            field=models.CharField(blank=True, max_length=15, null=True),
        ),
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('meta_title', models.CharField(blank=True, max_length=70, null=True)),
                ('meta_description', models.CharField(blank=True, max_length=160, null=True)),
                ('meta_keywords', models.CharField(blank=True, max_length=255, null=True)),
                ('title', models.CharField(max_length=255)),
                ('content', tinymce.models.HTMLField()),
                ('total_comment', models.IntegerField(default=0)),
                ('pid', models.CharField(default=utils.utils.gen_hex, max_length=32, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=300, null=True)),
                ('thumb', models.ImageField(blank=True, null=True, upload_to='blog/')),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.category')),
            ],
            options={
                'verbose_name_plural': 'Blog',
                'db_table': 'blogs',
            },
        ),
        migrations.CreateModel(
            name='BlogComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('meta_title', models.CharField(blank=True, max_length=70, null=True)),
                ('meta_description', models.CharField(blank=True, max_length=160, null=True)),
                ('meta_keywords', models.CharField(blank=True, max_length=255, null=True)),
                ('content', tinymce.models.HTMLField()),
                ('blog', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.blog')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Blog Comment',
                'db_table': 'blog_comment',
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('meta_title', models.CharField(blank=True, max_length=70, null=True)),
                ('meta_description', models.CharField(blank=True, max_length=160, null=True)),
                ('meta_keywords', models.CharField(blank=True, max_length=255, null=True)),
                ('feed', tinymce.models.HTMLField()),
                ('total_react', models.IntegerField(default=0)),
                ('total_comment', models.IntegerField(default=0)),
                ('pid', models.CharField(default=utils.utils.gen_hex, max_length=32, unique=True)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.category')),
            ],
            options={
                'verbose_name_plural': 'Post',
                'db_table': 'posts',
            },
        ),
        migrations.CreateModel(
            name='PostComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('meta_title', models.CharField(blank=True, max_length=70, null=True)),
                ('meta_description', models.CharField(blank=True, max_length=160, null=True)),
                ('meta_keywords', models.CharField(blank=True, max_length=255, null=True)),
                ('content', tinymce.models.HTMLField()),
                ('post', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.post')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Post Comment',
                'db_table': 'post_comment',
            },
        ),
        migrations.CreateModel(
            name='PostReact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Post React',
                'db_table': 'post_react',
            },
        ),
        migrations.CreateModel(
            name='StaticPage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('meta_title', models.CharField(blank=True, max_length=70, null=True)),
                ('meta_description', models.CharField(blank=True, max_length=160, null=True)),
                ('meta_keywords', models.CharField(blank=True, max_length=255, null=True)),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Tên trang')),
                ('slug', models.SlugField(blank=True, max_length=300, null=True)),
                ('use_auto_slug', models.BooleanField(default=False)),
                ('content', tinymce.models.HTMLField(blank=True, null=True, verbose_name='Nội dung')),
                ('display_status', models.SmallIntegerField(choices=[(0, 'Draft'), (1, 'Delete'), (2, 'Publish')], default=2, verbose_name='Trạng thái hiển thị')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.pagecategory', verbose_name='Chủ đề')),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.grouppage')),
            ],
            options={
                'verbose_name_plural': 'Static Page',
                'db_table': 'static_pages',
            },
        ),
    ]
